
Motoransteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000005f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001059  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca1  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b27  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000613  00000000  00000000  00003120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a7  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003ada  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_1>
   8:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_2>
   c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_3>
  10:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_4>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 41 02 	jmp	0x482	; 0x482 <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_42>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a7 30       	cpi	r26, 0x07	; 7
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 9e 01 	call	0x33c	; 0x33c <main>
  cc:	0c 94 bc 02 	jmp	0x578	; 0x578 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <allinit>:
#include "Motoransteuerung.h"


void allinit(void)
{
	CLKPR = 0x80;
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
	CLKPR = 0x01; //16MHz / 2 = 8MHz CLK_IO
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
	
	MCUCR = MCUCR|(1<<JTD); //JTAG disable
  e0:	85 b7       	in	r24, 0x35	; 53
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR|(1<<JTD);
  e6:	85 b7       	in	r24, 0x35	; 53
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	85 bf       	out	0x35, r24	; 53
	
	LCD_init();
  ec:	0e 94 00 01 	call	0x200	; 0x200 <LCD_init>
	LCD_cmd(0x0C);
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_cmd>
	 
	DDRB = DDRB | (1<<DDB7); //PB7 OUTPUT (LED)
  f6:	27 9a       	sbi	0x04, 7	; 4
	 
	DDRC = DDRC | (1<<DDC7); //OC4A -Pin (PC7) als OUTPUT Timer4
  f8:	3f 9a       	sbi	0x07, 7	; 7
	DDRB = DDRB | (1<<DDB6);//OC4B -Pin (PB6) als Output Timer4
  fa:	26 9a       	sbi	0x04, 6	; 4
	 
	DDRE = DDRE &~(1<<DDE6);//PE6 Input (AIN+ Für Komperator)
  fc:	6e 98       	cbi	0x0d, 6	; 13
	DDRF = DDRF &~(1<<DDF4); //PF4 INPUT (AIN- ADC4)
  fe:	84 98       	cbi	0x10, 4	; 16
	 
	DDRF = DDRF &~(1<<DDF0); //PF0 INPUT (ADC0 für Poti)
 100:	80 98       	cbi	0x10, 0	; 16
	 
	DDRD = DDRD &~(1<<DDD0) &~(1<<DDD1) &~(1<<DDD2) &~(1<<DDD3); //PD0-3 Input (External Interrupt0-3)
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD |(1<<PORTD0) |(1<<PORTD1) |(1<<PORTD2) |(1<<PORTD3);//PD0-3 Pull up ein
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	8f 60       	ori	r24, 0x0F	; 15
 10c:	8b b9       	out	0x0b, r24	; 11
	
	DIDR1 = DIDR1 | (1<<AIN0D); //dig. Input Buffer am AIN+ (PE6) disable
 10e:	ef e7       	ldi	r30, 0x7F	; 127
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	81 60       	ori	r24, 0x01	; 1
 116:	80 83       	st	Z, r24
	DIDR0 = DIDR0 | (1<<ADC4D); //dig. Input Buffer am ADC4 (PF4) disable
 118:	ee e7       	ldi	r30, 0x7E	; 126
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 61       	ori	r24, 0x10	; 16
 120:	80 83       	st	Z, r24
	 
	 
	TCCR4A = TCCR4A | (1<<PWM4A);
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
	TCCR4A = TCCR4A | (1<<PWM4B);
 12c:	80 81       	ld	r24, Z
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	80 83       	st	Z, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 132:	a3 ec       	ldi	r26, 0xC3	; 195
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	8c 91       	ld	r24, X
 138:	8d 7f       	andi	r24, 0xFD	; 253
 13a:	8c 93       	st	X, r24
	TCCR4D = TCCR4D &~(1<<WGM40); //Fast PWM Mode
 13c:	8c 91       	ld	r24, X
 13e:	8e 7f       	andi	r24, 0xFE	; 254
 140:	8c 93       	st	X, r24
	 
	TCCR4A = TCCR4A | (1<<COM4A1);
 142:	80 81       	ld	r24, Z
 144:	80 68       	ori	r24, 0x80	; 128
 146:	80 83       	st	Z, r24
	TCCR4A = TCCR4A &~ (1<<COM4A0); //COM4A1:0=2, OC4A(PC7) Pin ein 
 148:	80 81       	ld	r24, Z
 14a:	8f 7b       	andi	r24, 0xBF	; 191
 14c:	80 83       	st	Z, r24
	 
	TCCR4A = TCCR4A | (1<<COM4B1);
 14e:	80 81       	ld	r24, Z
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 83       	st	Z, r24
	TCCR4A = TCCR4A &~ (1<<COM4B0); //COM4B1:0=2, OC4B(PB6) Pin ein
 154:	80 81       	ld	r24, Z
 156:	8f 7e       	andi	r24, 0xEF	; 239
 158:	80 83       	st	Z, r24
	 
	 
	TCCR4D = TCCR4D | (1<<FPEN4);//Fault Protection Enable
 15a:	8c 91       	ld	r24, X
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8c 93       	st	X, r24
	TCCR4D = TCCR4D | (1<<FPIE4); //Fault Protection Interrupt Enable
 160:	8c 91       	ld	r24, X
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8c 93       	st	X, r24
	TCCR4D = TCCR4D | (1<<FPAC4);// Analog comparator auswählen
 166:	8c 91       	ld	r24, X
 168:	88 60       	ori	r24, 0x08	; 8
 16a:	8c 93       	st	X, r24
	 
	OCR4C = 200; //TOP für f_PWM = 10 kHz, f_PWM = f_CLK_T4/OCR4C
 16c:	88 ec       	ldi	r24, 0xC8	; 200
 16e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	OCR4B = 100; //1:1 Tastverhältnis (ohne Dead Time)
 172:	84 e6       	ldi	r24, 0x64	; 100
 174:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7e00d0>
	 
	 
	TCCR4B = TCCR4B &~(1<<CS43);
 178:	e1 ec       	ldi	r30, 0xC1	; 193
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	87 7f       	andi	r24, 0xF7	; 247
 180:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 182:	80 81       	ld	r24, Z
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS41);
 188:	80 81       	ld	r24, Z
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS40); //Timer4 Prescaler 4, Start PWM
 18e:	80 81       	ld	r24, Z
 190:	81 60       	ori	r24, 0x01	; 1
 192:	80 83       	st	Z, r24
	 
	TIMSK0 = TIMSK0 | (1<<TOIE0); //Timer_0 Overflow Interrupt freigeben
 194:	ee e6       	ldi	r30, 0x6E	; 110
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
	TCNT0 = 256-125; //Startwert für 1ms (125*8us=1ms)
 19e:	83 e8       	ldi	r24, 0x83	; 131
 1a0:	86 bd       	out	0x26, r24	; 38
	

	EICRA = EICRA | (1<<ISC01); //INT0 fallende Flanke
 1a2:	e9 e6       	ldi	r30, 0x69	; 105
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT0); //INT0 freigeben
 1ac:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA = EICRA | (1<<ISC11); //INT1 fallende Flanke
 1ae:	80 81       	ld	r24, Z
 1b0:	88 60       	ori	r24, 0x08	; 8
 1b2:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT1); //INT1 freigeben
 1b4:	e9 9a       	sbi	0x1d, 1	; 29
	
	EICRA = EICRA | (1<<ISC21); //INT2 fallende Flanke
 1b6:	80 81       	ld	r24, Z
 1b8:	80 62       	ori	r24, 0x20	; 32
 1ba:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT2); //INT2 freigeben
 1bc:	ea 9a       	sbi	0x1d, 2	; 29
	
	EICRA = EICRA | (1<<ISC31); //INT3 fallende Flanke
 1be:	80 81       	ld	r24, Z
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT3); //INT3 freigeben
 1c4:	eb 9a       	sbi	0x1d, 3	; 29
	
	
	sei();
 1c6:	78 94       	sei
 1c8:	08 95       	ret

000001ca <delay_ms>:
		else {PORTLCD = PORTLCD & ~(1<<DB4);}

		Enable();
		delay_ms(1);

}
 1ca:	00 97       	sbiw	r24, 0x00	; 0
 1cc:	69 f0       	breq	.+26     	; 0x1e8 <delay_ms+0x1e>
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	ef ec       	ldi	r30, 0xCF	; 207
 1d4:	f7 e0       	ldi	r31, 0x07	; 7
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <delay_ms+0xc>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <delay_ms+0x12>
 1dc:	00 00       	nop
 1de:	2f 5f       	subi	r18, 0xFF	; 255
 1e0:	3f 4f       	sbci	r19, 0xFF	; 255
 1e2:	82 17       	cp	r24, r18
 1e4:	93 07       	cpc	r25, r19
 1e6:	a9 f7       	brne	.-22     	; 0x1d2 <delay_ms+0x8>
 1e8:	08 95       	ret

000001ea <Enable>:
 1ea:	2d 9a       	sbi	0x05, 5	; 5
 1ec:	85 e0       	ldi	r24, 0x05	; 5
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_ms>
 1f4:	2d 98       	cbi	0x05, 5	; 5
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_ms>
 1fe:	08 95       	ret

00000200 <LCD_init>:
 200:	84 b1       	in	r24, 0x04	; 4
 202:	80 63       	ori	r24, 0x30	; 48
 204:	84 b9       	out	0x04, r24	; 4
 206:	84 b1       	in	r24, 0x04	; 4
 208:	8f 60       	ori	r24, 0x0F	; 15
 20a:	84 b9       	out	0x04, r24	; 4
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_ms>
 214:	85 b1       	in	r24, 0x05	; 5
 216:	8f 7c       	andi	r24, 0xCF	; 207
 218:	85 b9       	out	0x05, r24	; 5
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	83 7f       	andi	r24, 0xF3	; 243
 21e:	85 b9       	out	0x05, r24	; 5
 220:	85 b1       	in	r24, 0x05	; 5
 222:	83 60       	ori	r24, 0x03	; 3
 224:	85 b9       	out	0x05, r24	; 5
 226:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 22a:	85 b1       	in	r24, 0x05	; 5
 22c:	83 7f       	andi	r24, 0xF3	; 243
 22e:	85 b9       	out	0x05, r24	; 5
 230:	85 b1       	in	r24, 0x05	; 5
 232:	83 60       	ori	r24, 0x03	; 3
 234:	85 b9       	out	0x05, r24	; 5
 236:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 23a:	85 b1       	in	r24, 0x05	; 5
 23c:	83 7f       	andi	r24, 0xF3	; 243
 23e:	85 b9       	out	0x05, r24	; 5
 240:	85 b1       	in	r24, 0x05	; 5
 242:	83 60       	ori	r24, 0x03	; 3
 244:	85 b9       	out	0x05, r24	; 5
 246:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 24a:	85 b1       	in	r24, 0x05	; 5
 24c:	82 7f       	andi	r24, 0xF2	; 242
 24e:	85 b9       	out	0x05, r24	; 5
 250:	29 9a       	sbi	0x05, 1	; 5
 252:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 256:	85 b1       	in	r24, 0x05	; 5
 258:	82 7f       	andi	r24, 0xF2	; 242
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	29 9a       	sbi	0x05, 1	; 5
 25e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 262:	2b 9a       	sbi	0x05, 3	; 5
 264:	85 b1       	in	r24, 0x05	; 5
 266:	88 7f       	andi	r24, 0xF8	; 248
 268:	85 b9       	out	0x05, r24	; 5
 26a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	85 b9       	out	0x05, r24	; 5
 274:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 278:	2b 9a       	sbi	0x05, 3	; 5
 27a:	85 b1       	in	r24, 0x05	; 5
 27c:	88 7f       	andi	r24, 0xF8	; 248
 27e:	85 b9       	out	0x05, r24	; 5
 280:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 284:	85 b1       	in	r24, 0x05	; 5
 286:	80 7f       	andi	r24, 0xF0	; 240
 288:	85 b9       	out	0x05, r24	; 5
 28a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	81 7f       	andi	r24, 0xF1	; 241
 292:	85 b9       	out	0x05, r24	; 5
 294:	28 9a       	sbi	0x05, 0	; 5
 296:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	80 7f       	andi	r24, 0xF0	; 240
 29e:	85 b9       	out	0x05, r24	; 5
 2a0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 2a4:	85 b1       	in	r24, 0x05	; 5
 2a6:	83 7f       	andi	r24, 0xF3	; 243
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	85 b1       	in	r24, 0x05	; 5
 2ac:	83 60       	ori	r24, 0x03	; 3
 2ae:	85 b9       	out	0x05, r24	; 5
 2b0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 2b4:	85 b1       	in	r24, 0x05	; 5
 2b6:	80 7f       	andi	r24, 0xF0	; 240
 2b8:	85 b9       	out	0x05, r24	; 5
 2ba:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	8f 60       	ori	r24, 0x0F	; 15
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
 2c8:	08 95       	ret

000002ca <LCD_cmd>:
//
// LCD_cmd(..) Befehl senden im 4-Bit Mode
//
////////////////////////////////////////////////////////////////////////////
void LCD_cmd(char data)
{
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
	char temp = data;

		PORTLCD = PORTLCD & ~(1<<RS);	//SFR vom LCD mit RS auf Befehle umschalten
 2ce:	2c 98       	cbi	0x05, 4	; 5

		//Upper Nibble senden
		if (temp & 0b10000000) {PORTLCD = PORTLCD | (1<<DB7);}
 2d0:	88 23       	and	r24, r24
 2d2:	14 f4       	brge	.+4      	; 0x2d8 <LCD_cmd+0xe>
 2d4:	2b 9a       	sbi	0x05, 3	; 5
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <LCD_cmd+0x10>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 2d8:	2b 98       	cbi	0x05, 3	; 5

		if (temp & 0b01000000) {PORTLCD = PORTLCD | (1<<DB6);}
 2da:	c6 ff       	sbrs	r28, 6
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <LCD_cmd+0x18>
 2de:	2a 9a       	sbi	0x05, 2	; 5
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <LCD_cmd+0x1a>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 2e2:	2a 98       	cbi	0x05, 2	; 5

		if (temp & 0b00100000) {PORTLCD = PORTLCD | (1<<DB5);}
 2e4:	c5 ff       	sbrs	r28, 5
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <LCD_cmd+0x22>
 2e8:	29 9a       	sbi	0x05, 1	; 5
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <LCD_cmd+0x24>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 2ec:	29 98       	cbi	0x05, 1	; 5

		if (temp & 0b00010000) {PORTLCD = PORTLCD | (1<<DB4);}
 2ee:	c4 ff       	sbrs	r28, 4
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <LCD_cmd+0x2c>
 2f2:	28 9a       	sbi	0x05, 0	; 5
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <LCD_cmd+0x2e>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 2f6:	28 98       	cbi	0x05, 0	; 5

		Enable();
 2f8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
		delay_ms(1);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_ms>

		//Lower Nibble senden
		if (temp & 0b00001000) {PORTLCD = PORTLCD | (1<<DB7);}
 304:	c3 ff       	sbrs	r28, 3
 306:	02 c0       	rjmp	.+4      	; 0x30c <LCD_cmd+0x42>
 308:	2b 9a       	sbi	0x05, 3	; 5
 30a:	01 c0       	rjmp	.+2      	; 0x30e <LCD_cmd+0x44>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 30c:	2b 98       	cbi	0x05, 3	; 5

		if (temp & 0b00000100) {PORTLCD = PORTLCD | (1<<DB6);}
 30e:	c2 ff       	sbrs	r28, 2
 310:	02 c0       	rjmp	.+4      	; 0x316 <LCD_cmd+0x4c>
 312:	2a 9a       	sbi	0x05, 2	; 5
 314:	01 c0       	rjmp	.+2      	; 0x318 <LCD_cmd+0x4e>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 316:	2a 98       	cbi	0x05, 2	; 5

		if (temp & 0b00000010) {PORTLCD = PORTLCD | (1<<DB5);}
 318:	c1 ff       	sbrs	r28, 1
 31a:	02 c0       	rjmp	.+4      	; 0x320 <LCD_cmd+0x56>
 31c:	29 9a       	sbi	0x05, 1	; 5
 31e:	01 c0       	rjmp	.+2      	; 0x322 <LCD_cmd+0x58>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 320:	29 98       	cbi	0x05, 1	; 5

		if (temp & 0b00000001) {PORTLCD = PORTLCD | (1<<DB4);}
 322:	c0 ff       	sbrs	r28, 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <LCD_cmd+0x60>
 326:	28 9a       	sbi	0x05, 0	; 5
 328:	01 c0       	rjmp	.+2      	; 0x32c <LCD_cmd+0x62>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 32a:	28 98       	cbi	0x05, 0	; 5

		Enable();
 32c:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Enable>
		delay_ms(1);
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 e5 00 	call	0x1ca	; 0x1ca <delay_ms>

}
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <main>:

int main (void)
{
	 //char buffer[20];    //Wird benötigt um am LCD Ziffern auszugeben
	 
	allinit();
 33c:	0e 94 6a 00 	call	0xd4	; 0xd4 <allinit>
	
	while(1)
	{
		if(duty1 >= 0 && duty1 <= 100)
		{
			OCR4A = duty1 *  2;//PWM Tastverhältnis einstellen
 340:	ef ec       	ldi	r30, 0xCF	; 207
 342:	f0 e0       	ldi	r31, 0x00	; 0
	LCD_cmd(0x01);
	LCD_string(buffer);*/
	
	while(1)
	{
		if(duty1 >= 0 && duty1 <= 100)
 344:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 348:	85 36       	cpi	r24, 0x65	; 101
 34a:	f0 f7       	brcc	.-4      	; 0x348 <main+0xc>
		{
			OCR4A = duty1 *  2;//PWM Tastverhältnis einstellen
 34c:	88 0f       	add	r24, r24
 34e:	80 83       	st	Z, r24
 350:	f9 cf       	rjmp	.-14     	; 0x344 <main+0x8>

00000352 <__vector_42>:
	}
	return 0;
}

ISR (TIMER4_FPF_vect)
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
	PORTC = PORTC &~(1<<PORTC6);
 35c:	46 98       	cbi	0x08, 6	; 8
	PORTC = PORTC &~(1<<PORTC7);
 35e:	47 98       	cbi	0x08, 7	; 8
	while(1)
	{
		PORTB = PORTB ^(1<<PORTB7);
 360:	85 b1       	in	r24, 0x05	; 5
 362:	80 58       	subi	r24, 0x80	; 128
 364:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 366:	2f ef       	ldi	r18, 0xFF	; 255
 368:	84 e3       	ldi	r24, 0x34	; 52
 36a:	9c e0       	ldi	r25, 0x0C	; 12
 36c:	21 50       	subi	r18, 0x01	; 1
 36e:	80 40       	sbci	r24, 0x00	; 0
 370:	90 40       	sbci	r25, 0x00	; 0
 372:	e1 f7       	brne	.-8      	; 0x36c <__vector_42+0x1a>
 374:	00 c0       	rjmp	.+0      	; 0x376 <__vector_42+0x24>
 376:	00 00       	nop
 378:	f3 cf       	rjmp	.-26     	; 0x360 <__vector_42+0xe>

0000037a <__vector_1>:
		_delay_ms(500);
	}
}

ISR (INT0_vect) // Wenn Taster an PD0 gedrückt
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
	if(duty1 < 100)
 388:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 38c:	84 36       	cpi	r24, 0x64	; 100
 38e:	18 f4       	brcc	.+6      	; 0x396 <__vector_1+0x1c>
	{
		duty1++;
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
	}
	dutyh = 1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 39c:	85 b5       	in	r24, 0x25	; 37
 39e:	83 60       	ori	r24, 0x03	; 3
 3a0:	85 bd       	out	0x25, r24	; 37
	timer0zeit = 700; //700ms
 3a2:	8c eb       	ldi	r24, 0xBC	; 188
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 3ae:	9f 91       	pop	r25
 3b0:	8f 91       	pop	r24
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_2>:

ISR (INT1_vect) // Wenn Taster an PD1 gedrückt
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
	if(duty1 > 0)
 3ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 3ce:	88 23       	and	r24, r24
 3d0:	19 f0       	breq	.+6      	; 0x3d8 <__vector_2+0x1c>
	{
		duty1--;
 3d2:	81 50       	subi	r24, 0x01	; 1
 3d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
	}
	dutyh = 2;
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 3de:	85 b5       	in	r24, 0x25	; 37
 3e0:	83 60       	ori	r24, 0x03	; 3
 3e2:	85 bd       	out	0x25, r24	; 37
	timer0zeit = 700; //700ms
 3e4:	8c eb       	ldi	r24, 0xBC	; 188
 3e6:	92 e0       	ldi	r25, 0x02	; 2
 3e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <__vector_3>:
ISR (INT2_vect) // Wenn Taster an PD2 gedrückt
{
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
	if(duty2 < 100)
 40c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 410:	84 36       	cpi	r24, 0x64	; 100
 412:	18 f4       	brcc	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	{
		duty2++;
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
	}
	dutyh = 3;
 41a:	83 e0       	ldi	r24, 0x03	; 3
 41c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 420:	85 b5       	in	r24, 0x25	; 37
 422:	83 60       	ori	r24, 0x03	; 3
 424:	85 bd       	out	0x25, r24	; 37
	timer0zeit = 700; //700ms
 426:	8c eb       	ldi	r24, 0xBC	; 188
 428:	92 e0       	ldi	r25, 0x02	; 2
 42a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 42e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <__vector_4>:
ISR (INT3_vect) // Wenn Taster an PD3 gedrückt
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	8f 93       	push	r24
 44c:	9f 93       	push	r25
	if(duty2 > 0)
 44e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 452:	88 23       	and	r24, r24
 454:	19 f0       	breq	.+6      	; 0x45c <__vector_4+0x1c>
	{
		duty2--;
 456:	81 50       	subi	r24, 0x01	; 1
 458:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
	}
	dutyh = 4;
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 462:	85 b5       	in	r24, 0x25	; 37
 464:	83 60       	ori	r24, 0x03	; 3
 466:	85 bd       	out	0x25, r24	; 37
	timer0zeit = 700; //700ms
 468:	8c eb       	ldi	r24, 0xBC	; 188
 46a:	92 e0       	ldi	r25, 0x02	; 2
 46c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 470:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	0f 90       	pop	r0
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	0f 90       	pop	r0
 47e:	1f 90       	pop	r1
 480:	18 95       	reti

00000482 <__vector_23>:

ISR (TIMER0_OVF_vect)
{
 482:	1f 92       	push	r1
 484:	0f 92       	push	r0
 486:	0f b6       	in	r0, 0x3f	; 63
 488:	0f 92       	push	r0
 48a:	11 24       	eor	r1, r1
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
	timer0h++;
 494:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer0h>
 498:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer0h+0x1>
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer0h+0x1>
 4a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer0h>
	if(timer0h > timer0zeit)
 4a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 4aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 4ae:	28 17       	cp	r18, r24
 4b0:	39 07       	cpc	r19, r25
 4b2:	08 f0       	brcs	.+2      	; 0x4b6 <__vector_23+0x34>
 4b4:	56 c0       	rjmp	.+172    	; 0x562 <__vector_23+0xe0>
	{
		switch (dutyh)
 4b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dutyh>
 4ba:	82 30       	cpi	r24, 0x02	; 2
 4bc:	e1 f0       	breq	.+56     	; 0x4f6 <__vector_23+0x74>
 4be:	28 f4       	brcc	.+10     	; 0x4ca <__vector_23+0x48>
 4c0:	88 23       	and	r24, r24
 4c2:	41 f0       	breq	.+16     	; 0x4d4 <__vector_23+0x52>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	51 f0       	breq	.+20     	; 0x4dc <__vector_23+0x5a>
 4c8:	3d c0       	rjmp	.+122    	; 0x544 <__vector_23+0xc2>
 4ca:	83 30       	cpi	r24, 0x03	; 3
 4cc:	09 f1       	breq	.+66     	; 0x510 <__vector_23+0x8e>
 4ce:	84 30       	cpi	r24, 0x04	; 4
 4d0:	61 f1       	breq	.+88     	; 0x52a <__vector_23+0xa8>
 4d2:	38 c0       	rjmp	.+112    	; 0x544 <__vector_23+0xc2>
		{
			case 0:
				TCCR0B = TCCR0B &~ (1<<CS01) &~ (1<<CS00);//stoppt timer0
 4d4:	85 b5       	in	r24, 0x25	; 37
 4d6:	8c 7f       	andi	r24, 0xFC	; 252
 4d8:	85 bd       	out	0x25, r24	; 37
				break;
 4da:	39 c0       	rjmp	.+114    	; 0x54e <__vector_23+0xcc>
			case 1: // Taster 1
				if ((PIND & (1<<PIND0)) == 0x00) //wenn PD0 = LOW
 4dc:	48 99       	sbic	0x09, 0	; 9
 4de:	08 c0       	rjmp	.+16     	; 0x4f0 <__vector_23+0x6e>
				{
					if(duty1 < 100)
 4e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 4e4:	84 36       	cpi	r24, 0x64	; 100
 4e6:	98 f5       	brcc	.+102    	; 0x54e <__vector_23+0xcc>
					{
						duty1++;
 4e8:	8f 5f       	subi	r24, 0xFF	; 255
 4ea:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
 4ee:	2f c0       	rjmp	.+94     	; 0x54e <__vector_23+0xcc>
					}
				}
				else
				{
					dutyh = 0;
 4f0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dutyh>
 4f4:	2c c0       	rjmp	.+88     	; 0x54e <__vector_23+0xcc>
				}
				break;
			case 2: //Taster 2
				if ((PIND & (1<<PIND1)) == 0x00) //wenn PD1 = LOW
 4f6:	49 99       	sbic	0x09, 1	; 9
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <__vector_23+0x88>
				{
					if(duty1 > 0)
 4fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 4fe:	88 23       	and	r24, r24
 500:	31 f1       	breq	.+76     	; 0x54e <__vector_23+0xcc>
					{
						duty1--;
 502:	81 50       	subi	r24, 0x01	; 1
 504:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
 508:	22 c0       	rjmp	.+68     	; 0x54e <__vector_23+0xcc>
					}
				}
				else
				{
					dutyh = 0;
 50a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dutyh>
 50e:	1f c0       	rjmp	.+62     	; 0x54e <__vector_23+0xcc>
				}
				break;
				case 3: //Taster 3
				if ((PIND & (1<<PIND2)) == 0x00) //wenn PD2 = LOW
 510:	4a 99       	sbic	0x09, 2	; 9
 512:	08 c0       	rjmp	.+16     	; 0x524 <__vector_23+0xa2>
				{
					if(duty2 < 100)
 514:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 518:	84 36       	cpi	r24, 0x64	; 100
 51a:	c8 f4       	brcc	.+50     	; 0x54e <__vector_23+0xcc>
					{
						duty2++;
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
 522:	15 c0       	rjmp	.+42     	; 0x54e <__vector_23+0xcc>
					}
				}
				else
				{
					dutyh = 0;
 524:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dutyh>
 528:	12 c0       	rjmp	.+36     	; 0x54e <__vector_23+0xcc>
				}
				break;
				case 4:
				if ((PIND & (1<<PIND3)) == 0x00) //wenn PD0 = LOW
 52a:	4b 99       	sbic	0x09, 3	; 9
 52c:	08 c0       	rjmp	.+16     	; 0x53e <__vector_23+0xbc>
				{
					if(duty2 < 100)
 52e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 532:	84 36       	cpi	r24, 0x64	; 100
 534:	60 f4       	brcc	.+24     	; 0x54e <__vector_23+0xcc>
					{
						duty2++;
 536:	8f 5f       	subi	r24, 0xFF	; 255
 538:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
 53c:	08 c0       	rjmp	.+16     	; 0x54e <__vector_23+0xcc>
					}
				}
				else
				{
					dutyh = 0;
 53e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dutyh>
 542:	05 c0       	rjmp	.+10     	; 0x54e <__vector_23+0xcc>
				}
				break;
			default:
				{
					TCCR0B = TCCR0B &~ (1<<CS01) &~ (1<<CS00);//stoppt timer0
 544:	85 b5       	in	r24, 0x25	; 37
 546:	8c 7f       	andi	r24, 0xFC	; 252
 548:	85 bd       	out	0x25, r24	; 37
					dutyh = 0;
 54a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dutyh>
					break;
				}
		}
		timer0zeit = 50; // 50 ms
 54e:	82 e3       	ldi	r24, 0x32	; 50
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 556:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		timer0h = 0;
 55a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0h+0x1>
 55e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0h>
	}
	TCNT0 = 256-125; //Reinitialisierung
 562:	83 e8       	ldi	r24, 0x83	; 131
 564:	86 bd       	out	0x26, r24	; 38
}
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	3f 91       	pop	r19
 56c:	2f 91       	pop	r18
 56e:	0f 90       	pop	r0
 570:	0f be       	out	0x3f, r0	; 63
 572:	0f 90       	pop	r0
 574:	1f 90       	pop	r1
 576:	18 95       	reti

00000578 <_exit>:
 578:	f8 94       	cli

0000057a <__stop_program>:
 57a:	ff cf       	rjmp	.-2      	; 0x57a <__stop_program>
