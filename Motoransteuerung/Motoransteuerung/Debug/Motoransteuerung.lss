
Motoransteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010c2  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d1a  00000000  00000000  000016ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000986  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bf  00000000  00000000  00002e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030a  00000000  00000000  00003407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 b7 01 	call	0x36e	; 0x36e <main>
  bc:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <allinit>:
#include "Motoransteuerung.h"


void allinit(void)
{
	CLKPR = 0x80;
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	CLKPR = 0x01; //16MHz / 2 = 8MHz CLK_IO
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 83       	st	Z, r24
	
	MCUCR = MCUCR|(1<<JTD); //JTAG disable
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR|(1<<JTD);
  d6:	85 b7       	in	r24, 0x35	; 53
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	85 bf       	out	0x35, r24	; 53
	
	 LCD_init();
  dc:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <LCD_init>
	 LCD_cmd(0x0C);
  e0:	8c e0       	ldi	r24, 0x0C	; 12
  e2:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_cmd>
	 DDRC = DDRC | (1<<DDC7); //OC4A -Pin (PC7) als OUTPUT Timer4
  e6:	3f 9a       	sbi	0x07, 7	; 7
	 DDRC = DDRC | (1<<DDC6); //OC4A#-Pin (PC6) als OUTPUT
  e8:	3e 9a       	sbi	0x07, 6	; 7
	 DDRF = DDRF &~(1<<DDF0); //PF0 INPUT (ADC0)
  ea:	80 98       	cbi	0x10, 0	; 16
	 
	 ADMUX = ADMUX &~(1<<REFS1);
  ec:	ec e7       	ldi	r30, 0x7C	; 124
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	80 83       	st	Z, r24
	 ADMUX = ADMUX | (1<<REFS0); //Vref=AVCC
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
	 ADMUX = ADMUX | (1<<ADLAR); //linksbündig
  fc:	80 81       	ld	r24, Z
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 83       	st	Z, r24
	 ADMUX = ADMUX & 0b11100000; //MUX4:0 = 0
 102:	80 81       	ld	r24, Z
 104:	80 7e       	andi	r24, 0xE0	; 224
 106:	80 83       	st	Z, r24
	 ADCSRB = ADCSRB &~ (1<<MUX5); //MUX5 = 0 => MUX5:0=0 => //ADC0 (PF0) Single Ended
 108:	eb e7       	ldi	r30, 0x7B	; 123
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	8f 7d       	andi	r24, 0xDF	; 223
 110:	80 83       	st	Z, r24
	 
	 ADCSRA = ADCSRA|(1<<ADEN)|(1<<ADSC)|(1<<ADPS2)|(1<<ADPS1); //Wandler ein, //Start Wandler,:64 Teiler
 112:	ea e7       	ldi	r30, 0x7A	; 122
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	86 6c       	ori	r24, 0xC6	; 198
 11a:	80 83       	st	Z, r24
	 
	 
	 TCCR4A = TCCR4A | (1<<PWM4A);
 11c:	e0 ec       	ldi	r30, 0xC0	; 192
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
	 TCCR4D = TCCR4D &~(1<<WGM41);
 126:	a3 ec       	ldi	r26, 0xC3	; 195
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	8c 91       	ld	r24, X
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	8c 93       	st	X, r24
	 TCCR4D = TCCR4D &~(1<<WGM40); //Fast PWM Mode
 130:	8c 91       	ld	r24, X
 132:	8e 7f       	andi	r24, 0xFE	; 254
 134:	8c 93       	st	X, r24
	 
	 TCCR4A = TCCR4A &~(1<<COM4A1);
 136:	80 81       	ld	r24, Z
 138:	8f 77       	andi	r24, 0x7F	; 127
 13a:	80 83       	st	Z, r24
	 TCCR4A = TCCR4A | (1<<COM4A0); //COM4A1:0=1, OC4A(PC7) und OC4A#(PC6) Pins ein 
 13c:	80 81       	ld	r24, Z
 13e:	80 64       	ori	r24, 0x40	; 64
 140:	80 83       	st	Z, r24
	 
	 OCR4C = 200; //TOP für f_PWM = 10 kHz, f_PWM = f_CLK_T4/OCR4C
 142:	88 ec       	ldi	r24, 0xC8	; 200
 144:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	 
	 OCR4A = 100; //1:1 Tastverhältnis (ohne Dead Time)
 148:	84 e6       	ldi	r24, 0x64	; 100
 14a:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__TEXT_REGION_LENGTH__+0x7e00cf>
	 
	 TCCR4B = TCCR4B &~(1<<CS43);
 14e:	e1 ec       	ldi	r30, 0xC1	; 193
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	87 7f       	andi	r24, 0xF7	; 247
 156:	80 83       	st	Z, r24
	 TCCR4B = TCCR4B &~(1<<CS42);
 158:	80 81       	ld	r24, Z
 15a:	8b 7f       	andi	r24, 0xFB	; 251
 15c:	80 83       	st	Z, r24
	 TCCR4B = TCCR4B | (1<<CS41);
 15e:	80 81       	ld	r24, Z
 160:	82 60       	ori	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
	 TCCR4B = TCCR4B | (1<<CS40); //Timer4 Prescaler 4, Start PWM
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <delay_ms>:
#include <util/delay.h>		// _delay_ms() geht nur bis max. 262.14 ms / F_CPU !!!

void delay_ms (unsigned int ms)   //Hilfsfunktion: Zeitvernichtung
{
unsigned int i;
	for (i=0; i<ms; i++)
 16c:	00 97       	sbiw	r24, 0x00	; 0
 16e:	69 f0       	breq	.+26     	; 0x18a <delay_ms+0x1e>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	ef ec       	ldi	r30, 0xCF	; 207
 176:	f7 e0       	ldi	r31, 0x07	; 7
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <delay_ms+0xc>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <delay_ms+0x12>
 17e:	00 00       	nop
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	3f 4f       	sbci	r19, 0xFF	; 255
 184:	82 17       	cp	r24, r18
 186:	93 07       	cpc	r25, r19
 188:	a9 f7       	brne	.-22     	; 0x174 <delay_ms+0x8>
 18a:	08 95       	ret

0000018c <Enable>:

}

void Enable(void)		//Hilfsfunktion: H=>L Flanke der Enable Leitung (E)
{
	PORTLCD = PORTLCD | (1<<E);	//E = 1
 18c:	5d 9a       	sbi	0x0b, 5	; 11
	delay_ms(5);
 18e:	85 e0       	ldi	r24, 0x05	; 5
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 b6 00 	call	0x16c	; 0x16c <delay_ms>
	PORTLCD = PORTLCD &~(1<<E);	//E = 0
 196:	5d 98       	cbi	0x0b, 5	; 11
	delay_ms(5);
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 b6 00 	call	0x16c	; 0x16c <delay_ms>
 1a0:	08 95       	ret

000001a2 <LCD_init>:
// LCD_init(..) Initialisierung: Port D, 4-Bit Mode, 2 Zeilen, 5x7 Dots
//
////////////////////////////////////////////////////////////////////////////
void LCD_init(void)
{
	DDRLCD = DDRLCD |(1<<E) |(1<<RS);               			//E,RS als Ausgang
 1a2:	8a b1       	in	r24, 0x0a	; 10
 1a4:	80 63       	ori	r24, 0x30	; 48
 1a6:	8a b9       	out	0x0a, r24	; 10
	DDRLCD = DDRLCD |(1<<DB7)|(1<<DB6)|(1<<DB5)|(1<<DB4);		//DB7..DB4 als Ausgang
 1a8:	8a b1       	in	r24, 0x0a	; 10
 1aa:	8f 60       	ori	r24, 0x0F	; 15
 1ac:	8a b9       	out	0x0a, r24	; 10

	delay_ms(50);	//lt. Datenblatt min. 15ms nach Power ON warten
 1ae:	82 e3       	ldi	r24, 0x32	; 50
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 b6 00 	call	0x16c	; 0x16c <delay_ms>
	PORTLCD = PORTLCD & (~(1<<RS) &  ~(1<<E)); //RS=0,E=0 (RW=0 per HW)
 1b6:	8b b1       	in	r24, 0x0b	; 11
 1b8:	8f 7c       	andi	r24, 0xCF	; 207
 1ba:	8b b9       	out	0x0b, r24	; 11

// Function Set
	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit
 1bc:	8b b1       	in	r24, 0x0b	; 11
 1be:	83 7f       	andi	r24, 0xF3	; 243
 1c0:	8b b9       	out	0x0b, r24	; 11
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 1c2:	8b b1       	in	r24, 0x0b	; 11
 1c4:	83 60       	ori	r24, 0x03	; 3
 1c6:	8b b9       	out	0x0b, r24	; 11
	Enable();
 1c8:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit
 1cc:	8b b1       	in	r24, 0x0b	; 11
 1ce:	83 7f       	andi	r24, 0xF3	; 243
 1d0:	8b b9       	out	0x0b, r24	; 11
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	83 60       	ori	r24, 0x03	; 3
 1d6:	8b b9       	out	0x0b, r24	; 11
	Enable();
 1d8:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit
 1dc:	8b b1       	in	r24, 0x0b	; 11
 1de:	83 7f       	andi	r24, 0xF3	; 243
 1e0:	8b b9       	out	0x0b, r24	; 11
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 1e2:	8b b1       	in	r24, 0x0b	; 11
 1e4:	83 60       	ori	r24, 0x03	; 3
 1e6:	8b b9       	out	0x0b, r24	; 11
	Enable();
 1e8:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 0010
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));
 1ec:	8b b1       	in	r24, 0x0b	; 11
 1ee:	82 7f       	andi	r24, 0xF2	; 242
 1f0:	8b b9       	out	0x0b, r24	; 11
	PORTLCD = PORTLCD | (1<<DB5);					//Interface auf 4 Bit
 1f2:	59 9a       	sbi	0x0b, 1	; 11
	Enable();
 1f4:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

// 2-zeilig, 5x8 Matrix
	//DB7..DB4 = 0010
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));
 1f8:	8b b1       	in	r24, 0x0b	; 11
 1fa:	82 7f       	andi	r24, 0xF2	; 242
 1fc:	8b b9       	out	0x0b, r24	; 11
	PORTLCD = PORTLCD | (1<<DB5);					//Upper Nibble
 1fe:	59 9a       	sbi	0x0b, 1	; 11
	Enable();
 200:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 0000
	PORTLCD = PORTLCD | (1<<DB7);			//Lower Nibble
 204:	5b 9a       	sbi	0x0b, 3	; 11
	PORTLCD = PORTLCD & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	88 7f       	andi	r24, 0xF8	; 248
 20a:	8b b9       	out	0x0b, r24	; 11
	Enable();
 20c:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

//Display Off //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 210:	8b b1       	in	r24, 0x0b	; 11
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	8b b9       	out	0x0b, r24	; 11
	Enable();
 216:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 1000
	PORTLCD = PORTLCD | (1<<DB7);					//Lower Nibble
 21a:	5b 9a       	sbi	0x0b, 3	; 11
	PORTLCD = PORTLCD & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));
 21c:	8b b1       	in	r24, 0x0b	; 11
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	8b b9       	out	0x0b, r24	; 11
	Enable();
 222:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

//Clear Display //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 226:	8b b1       	in	r24, 0x0b	; 11
 228:	80 7f       	andi	r24, 0xF0	; 240
 22a:	8b b9       	out	0x0b, r24	; 11
	Enable();
 22c:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 0001
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5)); //Lower Nibble
 230:	8b b1       	in	r24, 0x0b	; 11
 232:	81 7f       	andi	r24, 0xF1	; 241
 234:	8b b9       	out	0x0b, r24	; 11
	PORTLCD = PORTLCD | (1<<DB4);
 236:	58 9a       	sbi	0x0b, 0	; 11
	Enable();
 238:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

//No Display Shift //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 23c:	8b b1       	in	r24, 0x0b	; 11
 23e:	80 7f       	andi	r24, 0xF0	; 240
 240:	8b b9       	out	0x0b, r24	; 11
	Enable();
 242:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Lower Nibble
 246:	8b b1       	in	r24, 0x0b	; 11
 248:	83 7f       	andi	r24, 0xF3	; 243
 24a:	8b b9       	out	0x0b, r24	; 11
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 24c:	8b b1       	in	r24, 0x0b	; 11
 24e:	83 60       	ori	r24, 0x03	; 3
 250:	8b b9       	out	0x0b, r24	; 11
	Enable();
 252:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

// Display ON , Cursor ON, Blinken ON //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 256:	8b b1       	in	r24, 0x0b	; 11
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	8b b9       	out	0x0b, r24	; 11
	Enable();
 25c:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>

	//DB7..DB4 = 1111
	PORTLCD = PORTLCD | (1<<DB7) | (1<<DB6) | (1<<DB5) | (1<<DB4);	//Lower Nibble
 260:	8b b1       	in	r24, 0x0b	; 11
 262:	8f 60       	ori	r24, 0x0F	; 15
 264:	8b b9       	out	0x0b, r24	; 11
	Enable();
 266:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>
 26a:	08 95       	ret

0000026c <LCD_send>:
//
// LCD_send(..) sendet 1 Byte im 4-Bit Mode
//
////////////////////////////////////////////////////////////////////////////
void LCD_send(char data)
{
 26c:	cf 93       	push	r28
 26e:	c8 2f       	mov	r28, r24
	char temp = data;

		PORTLCD = PORTLCD | (1<<RS);	//SFR vom LCD mit RS auf Daten umschlten
 270:	5c 9a       	sbi	0x0b, 4	; 11

		//Upper Nibble senden
		if (temp & 0b10000000) {PORTLCD = PORTLCD | (1<<DB7);}
 272:	88 23       	and	r24, r24
 274:	14 f4       	brge	.+4      	; 0x27a <LCD_send+0xe>
 276:	5b 9a       	sbi	0x0b, 3	; 11
 278:	01 c0       	rjmp	.+2      	; 0x27c <LCD_send+0x10>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 27a:	5b 98       	cbi	0x0b, 3	; 11

		if (temp & 0b01000000) {PORTLCD = PORTLCD | (1<<DB6);}
 27c:	c6 ff       	sbrs	r28, 6
 27e:	02 c0       	rjmp	.+4      	; 0x284 <LCD_send+0x18>
 280:	5a 9a       	sbi	0x0b, 2	; 11
 282:	01 c0       	rjmp	.+2      	; 0x286 <LCD_send+0x1a>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 284:	5a 98       	cbi	0x0b, 2	; 11

		if (temp & 0b00100000) {PORTLCD = PORTLCD | (1<<DB5);}
 286:	c5 ff       	sbrs	r28, 5
 288:	02 c0       	rjmp	.+4      	; 0x28e <LCD_send+0x22>
 28a:	59 9a       	sbi	0x0b, 1	; 11
 28c:	01 c0       	rjmp	.+2      	; 0x290 <LCD_send+0x24>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 28e:	59 98       	cbi	0x0b, 1	; 11

		if (temp & 0b00010000) {PORTLCD = PORTLCD | (1<<DB4);}
 290:	c4 ff       	sbrs	r28, 4
 292:	02 c0       	rjmp	.+4      	; 0x298 <LCD_send+0x2c>
 294:	58 9a       	sbi	0x0b, 0	; 11
 296:	01 c0       	rjmp	.+2      	; 0x29a <LCD_send+0x2e>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 298:	58 98       	cbi	0x0b, 0	; 11

		Enable();
 29a:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>
		delay_ms(1);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 b6 00 	call	0x16c	; 0x16c <delay_ms>

		//Lower Nibble senden
		if (temp & 0b00001000) {PORTLCD = PORTLCD | (1<<DB7);}
 2a6:	c3 ff       	sbrs	r28, 3
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <LCD_send+0x42>
 2aa:	5b 9a       	sbi	0x0b, 3	; 11
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <LCD_send+0x44>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 2ae:	5b 98       	cbi	0x0b, 3	; 11

		if (temp & 0b00000100) {PORTLCD = PORTLCD | (1<<DB6);}
 2b0:	c2 ff       	sbrs	r28, 2
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <LCD_send+0x4c>
 2b4:	5a 9a       	sbi	0x0b, 2	; 11
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <LCD_send+0x4e>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 2b8:	5a 98       	cbi	0x0b, 2	; 11

		if (temp & 0b00000010) {PORTLCD = PORTLCD | (1<<DB5);}
 2ba:	c1 ff       	sbrs	r28, 1
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <LCD_send+0x56>
 2be:	59 9a       	sbi	0x0b, 1	; 11
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <LCD_send+0x58>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 2c2:	59 98       	cbi	0x0b, 1	; 11

		if (temp & 0b00000001) {PORTLCD = PORTLCD | (1<<DB4);}
 2c4:	c0 ff       	sbrs	r28, 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <LCD_send+0x60>
 2c8:	58 9a       	sbi	0x0b, 0	; 11
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <LCD_send+0x62>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 2cc:	58 98       	cbi	0x0b, 0	; 11

		Enable();
 2ce:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>
		delay_ms(1);
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 b6 00 	call	0x16c	; 0x16c <delay_ms>

}
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <LCD_cmd>:
//
// LCD_cmd(..) Befehl senden im 4-Bit Mode
//
////////////////////////////////////////////////////////////////////////////
void LCD_cmd(char data)
{
 2de:	cf 93       	push	r28
 2e0:	c8 2f       	mov	r28, r24
	char temp = data;

		PORTLCD = PORTLCD & ~(1<<RS);	//SFR vom LCD mit RS auf Befehle umschalten
 2e2:	5c 98       	cbi	0x0b, 4	; 11

		//Upper Nibble senden
		if (temp & 0b10000000) {PORTLCD = PORTLCD | (1<<DB7);}
 2e4:	88 23       	and	r24, r24
 2e6:	14 f4       	brge	.+4      	; 0x2ec <LCD_cmd+0xe>
 2e8:	5b 9a       	sbi	0x0b, 3	; 11
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <LCD_cmd+0x10>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 2ec:	5b 98       	cbi	0x0b, 3	; 11

		if (temp & 0b01000000) {PORTLCD = PORTLCD | (1<<DB6);}
 2ee:	c6 ff       	sbrs	r28, 6
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <LCD_cmd+0x18>
 2f2:	5a 9a       	sbi	0x0b, 2	; 11
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <LCD_cmd+0x1a>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 2f6:	5a 98       	cbi	0x0b, 2	; 11

		if (temp & 0b00100000) {PORTLCD = PORTLCD | (1<<DB5);}
 2f8:	c5 ff       	sbrs	r28, 5
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <LCD_cmd+0x22>
 2fc:	59 9a       	sbi	0x0b, 1	; 11
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <LCD_cmd+0x24>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 300:	59 98       	cbi	0x0b, 1	; 11

		if (temp & 0b00010000) {PORTLCD = PORTLCD | (1<<DB4);}
 302:	c4 ff       	sbrs	r28, 4
 304:	02 c0       	rjmp	.+4      	; 0x30a <LCD_cmd+0x2c>
 306:	58 9a       	sbi	0x0b, 0	; 11
 308:	01 c0       	rjmp	.+2      	; 0x30c <LCD_cmd+0x2e>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 30a:	58 98       	cbi	0x0b, 0	; 11

		Enable();
 30c:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>
		delay_ms(1);
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 b6 00 	call	0x16c	; 0x16c <delay_ms>

		//Lower Nibble senden
		if (temp & 0b00001000) {PORTLCD = PORTLCD | (1<<DB7);}
 318:	c3 ff       	sbrs	r28, 3
 31a:	02 c0       	rjmp	.+4      	; 0x320 <LCD_cmd+0x42>
 31c:	5b 9a       	sbi	0x0b, 3	; 11
 31e:	01 c0       	rjmp	.+2      	; 0x322 <LCD_cmd+0x44>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 320:	5b 98       	cbi	0x0b, 3	; 11

		if (temp & 0b00000100) {PORTLCD = PORTLCD | (1<<DB6);}
 322:	c2 ff       	sbrs	r28, 2
 324:	02 c0       	rjmp	.+4      	; 0x32a <LCD_cmd+0x4c>
 326:	5a 9a       	sbi	0x0b, 2	; 11
 328:	01 c0       	rjmp	.+2      	; 0x32c <LCD_cmd+0x4e>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 32a:	5a 98       	cbi	0x0b, 2	; 11

		if (temp & 0b00000010) {PORTLCD = PORTLCD | (1<<DB5);}
 32c:	c1 ff       	sbrs	r28, 1
 32e:	02 c0       	rjmp	.+4      	; 0x334 <LCD_cmd+0x56>
 330:	59 9a       	sbi	0x0b, 1	; 11
 332:	01 c0       	rjmp	.+2      	; 0x336 <LCD_cmd+0x58>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 334:	59 98       	cbi	0x0b, 1	; 11

		if (temp & 0b00000001) {PORTLCD = PORTLCD | (1<<DB4);}
 336:	c0 ff       	sbrs	r28, 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <LCD_cmd+0x60>
 33a:	58 9a       	sbi	0x0b, 0	; 11
 33c:	01 c0       	rjmp	.+2      	; 0x340 <LCD_cmd+0x62>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 33e:	58 98       	cbi	0x0b, 0	; 11

		Enable();
 340:	0e 94 c6 00 	call	0x18c	; 0x18c <Enable>
		delay_ms(1);
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 b6 00 	call	0x16c	; 0x16c <delay_ms>

}
 34c:	cf 91       	pop	r28
 34e:	08 95       	ret

00000350 <LCD_string>:
//
// LCD_string(..) sendet ganzen String im 4-Bit Mode
//
////////////////////////////////////////////////////////////////////////////
void LCD_string(char *data)
{
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	ec 01       	movw	r28, r24
	    while (*data != '\0')	//bis zum letzten Zeichen
 356:	88 81       	ld	r24, Y
 358:	88 23       	and	r24, r24
 35a:	31 f0       	breq	.+12     	; 0x368 <LCD_string+0x18>
 35c:	21 96       	adiw	r28, 0x01	; 1
        	{LCD_send(*data++);}
 35e:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_send>
// LCD_string(..) sendet ganzen String im 4-Bit Mode
//
////////////////////////////////////////////////////////////////////////////
void LCD_string(char *data)
{
	    while (*data != '\0')	//bis zum letzten Zeichen
 362:	89 91       	ld	r24, Y+
 364:	81 11       	cpse	r24, r1
 366:	fb cf       	rjmp	.-10     	; 0x35e <LCD_string+0xe>
        	{LCD_send(*data++);}
}
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <main>:
#include <util/delay.h>
#include "Motoransteuerung.h"


int main (void)
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	64 97       	sbiw	r28, 0x14	; 20
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
	CLKPR = 0x80;
 382:	e1 e6       	ldi	r30, 0x61	; 97
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 e8       	ldi	r24, 0x80	; 128
 388:	80 83       	st	Z, r24
	CLKPR = 0x01; //16MHz / 2 = 8MHz CLK_IO
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 83       	st	Z, r24
	
	MCUCR = MCUCR|(1<<JTD); //JTAG disable
 38e:	85 b7       	in	r24, 0x35	; 53
 390:	80 68       	ori	r24, 0x80	; 128
 392:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR|(1<<JTD);
 394:	85 b7       	in	r24, 0x35	; 53
 396:	80 68       	ori	r24, 0x80	; 128
 398:	85 bf       	out	0x35, r24	; 53
	 char buffer[20];    //Wird benötigt um am LCD Ziffern auszugeben
	 unsigned char adc_h;
	 unsigned char Vin;
	 unsigned char h = 0;
	 
	allinit();
 39a:	0e 94 62 00 	call	0xc4	; 0xc4 <allinit>
	MCUCR = MCUCR|(1<<JTD);
	
	 char buffer[20];    //Wird benötigt um am LCD Ziffern auszugeben
	 unsigned char adc_h;
	 unsigned char Vin;
	 unsigned char h = 0;
 39e:	90 e0       	ldi	r25, 0x00	; 0
	allinit();
	
	
	while(1)
	{
		while(ADCSRA & (1<<ADSC)); //warten auf Wandlungsende
 3a0:	0a e7       	ldi	r16, 0x7A	; 122
 3a2:	10 e0       	ldi	r17, 0x00	; 0
		adc_h = ADCL;
 3a4:	0f 2e       	mov	r0, r31
 3a6:	f8 e7       	ldi	r31, 0x78	; 120
 3a8:	af 2e       	mov	r10, r31
 3aa:	b1 2c       	mov	r11, r1
 3ac:	f0 2d       	mov	r31, r0
		adc_h = ADCH;
 3ae:	0f 2e       	mov	r0, r31
 3b0:	f9 e7       	ldi	r31, 0x79	; 121
 3b2:	cf 2e       	mov	r12, r31
 3b4:	d1 2c       	mov	r13, r1
 3b6:	f0 2d       	mov	r31, r0
			}
			else
			{
				Vin = Vin - 27;
			}
			OCR4A = Vin * 2; //PWM Tastverhältnis einstellen
 3b8:	0f 2e       	mov	r0, r31
 3ba:	ff ec       	ldi	r31, 0xCF	; 207
 3bc:	8f 2e       	mov	r8, r31
 3be:	91 2c       	mov	r9, r1
 3c0:	f0 2d       	mov	r31, r0
		if(adc_h != h)
		{
			Vin = adc_h;
			if(Vin >=0 && Vin <= 27)
			{
				Vin = 0;
 3c2:	e1 2c       	mov	r14, r1
	allinit();
	
	
	while(1)
	{
		while(ADCSRA & (1<<ADSC)); //warten auf Wandlungsende
 3c4:	f8 01       	movw	r30, r16
 3c6:	80 81       	ld	r24, Z
 3c8:	86 fd       	sbrc	r24, 6
 3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <main+0x56>
		adc_h = ADCL;
 3cc:	f5 01       	movw	r30, r10
 3ce:	80 81       	ld	r24, Z
		adc_h = ADCH;
 3d0:	f6 01       	movw	r30, r12
 3d2:	f0 80       	ld	r15, Z
		adc_h = adc_h>>1;
 3d4:	f6 94       	lsr	r15
		
		if(adc_h != h)
 3d6:	9f 15       	cp	r25, r15
 3d8:	11 f1       	breq	.+68     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			Vin = adc_h;
			if(Vin >=0 && Vin <= 27)
 3da:	fb e1       	ldi	r31, 0x1B	; 27
 3dc:	ff 15       	cp	r31, r15
 3de:	18 f4       	brcc	.+6      	; 0x3e6 <main+0x78>
			{
				Vin = 0;
			}
			else
			{
				Vin = Vin - 27;
 3e0:	85 ee       	ldi	r24, 0xE5	; 229
 3e2:	8f 0d       	add	r24, r15
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <main+0x7a>
		if(adc_h != h)
		{
			Vin = adc_h;
			if(Vin >=0 && Vin <= 27)
			{
				Vin = 0;
 3e6:	8e 2d       	mov	r24, r14
			}
			else
			{
				Vin = Vin - 27;
			}
			OCR4A = Vin * 2; //PWM Tastverhältnis einstellen
 3e8:	98 2f       	mov	r25, r24
 3ea:	99 0f       	add	r25, r25
 3ec:	f4 01       	movw	r30, r8
 3ee:	90 83       	st	Z, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3f0:	4a e0       	ldi	r20, 0x0A	; 10
 3f2:	be 01       	movw	r22, r28
 3f4:	6f 5f       	subi	r22, 0xFF	; 255
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0e 94 15 02 	call	0x42a	; 0x42a <__itoa_ncheck>
			
			itoa (Vin,buffer,10);
			LCD_cmd(0x01);
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	0e 94 6f 01 	call	0x2de	; 0x2de <LCD_cmd>
			LCD_string(buffer);
 404:	ce 01       	movw	r24, r28
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	0e 94 a8 01 	call	0x350	; 0x350 <LCD_string>
 40c:	ff ef       	ldi	r31, 0xFF	; 255
 40e:	21 ee       	ldi	r18, 0xE1	; 225
 410:	84 e0       	ldi	r24, 0x04	; 4
 412:	f1 50       	subi	r31, 0x01	; 1
 414:	20 40       	sbci	r18, 0x00	; 0
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
			h = adc_h;
			_delay_ms(200);

			
		}
		ADCSRA = ADCSRA|(1<<ADSC);  //Wandler neu starten
 41e:	f8 01       	movw	r30, r16
 420:	80 81       	ld	r24, Z
 422:	80 64       	ori	r24, 0x40	; 64
 424:	80 83       	st	Z, r24
		
		
		
	}
 426:	9f 2d       	mov	r25, r15
 428:	cd cf       	rjmp	.-102    	; 0x3c4 <main+0x56>

0000042a <__itoa_ncheck>:
 42a:	bb 27       	eor	r27, r27
 42c:	4a 30       	cpi	r20, 0x0A	; 10
 42e:	31 f4       	brne	.+12     	; 0x43c <__itoa_ncheck+0x12>
 430:	99 23       	and	r25, r25
 432:	22 f4       	brpl	.+8      	; 0x43c <__itoa_ncheck+0x12>
 434:	bd e2       	ldi	r27, 0x2D	; 45
 436:	90 95       	com	r25
 438:	81 95       	neg	r24
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	0c 94 21 02 	jmp	0x442	; 0x442 <__utoa_common>

00000440 <__utoa_ncheck>:
 440:	bb 27       	eor	r27, r27

00000442 <__utoa_common>:
 442:	fb 01       	movw	r30, r22
 444:	55 27       	eor	r21, r21
 446:	aa 27       	eor	r26, r26
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	aa 1f       	adc	r26, r26
 44e:	a4 17       	cp	r26, r20
 450:	10 f0       	brcs	.+4      	; 0x456 <__utoa_common+0x14>
 452:	a4 1b       	sub	r26, r20
 454:	83 95       	inc	r24
 456:	50 51       	subi	r21, 0x10	; 16
 458:	b9 f7       	brne	.-18     	; 0x448 <__utoa_common+0x6>
 45a:	a0 5d       	subi	r26, 0xD0	; 208
 45c:	aa 33       	cpi	r26, 0x3A	; 58
 45e:	08 f0       	brcs	.+2      	; 0x462 <__utoa_common+0x20>
 460:	a9 5d       	subi	r26, 0xD9	; 217
 462:	a1 93       	st	Z+, r26
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	79 f7       	brne	.-34     	; 0x446 <__utoa_common+0x4>
 468:	b1 11       	cpse	r27, r1
 46a:	b1 93       	st	Z+, r27
 46c:	11 92       	st	Z+, r1
 46e:	cb 01       	movw	r24, r22
 470:	0c 94 3a 02 	jmp	0x474	; 0x474 <strrev>

00000474 <strrev>:
 474:	dc 01       	movw	r26, r24
 476:	fc 01       	movw	r30, r24
 478:	67 2f       	mov	r22, r23
 47a:	71 91       	ld	r23, Z+
 47c:	77 23       	and	r23, r23
 47e:	e1 f7       	brne	.-8      	; 0x478 <strrev+0x4>
 480:	32 97       	sbiw	r30, 0x02	; 2
 482:	04 c0       	rjmp	.+8      	; 0x48c <strrev+0x18>
 484:	7c 91       	ld	r23, X
 486:	6d 93       	st	X+, r22
 488:	70 83       	st	Z, r23
 48a:	62 91       	ld	r22, -Z
 48c:	ae 17       	cp	r26, r30
 48e:	bf 07       	cpc	r27, r31
 490:	c8 f3       	brcs	.-14     	; 0x484 <strrev+0x10>
 492:	08 95       	ret

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
