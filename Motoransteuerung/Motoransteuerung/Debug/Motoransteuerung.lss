
Motoransteuerung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000616  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000068a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010d6  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd7  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b41  00000000  00000000  00002571  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  00003288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a7  00000000  00000000  000038ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003c52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 16 02 	jmp	0x42c	; 0x42c <__vector_1>
   8:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_2>
   c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__vector_3>
  10:	0c 94 7d 02 	jmp	0x4fa	; 0x4fa <__vector_4>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__vector_23>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 02 02 	jmp	0x404	; 0x404 <__vector_42>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a7 30       	cpi	r26, 0x07	; 7
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <main>
  cc:	0c 94 09 03 	jmp	0x612	; 0x612 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <allinit>:
#include "Motoransteuerung.h"


void allinit(void)
{
	CLKPR = 0x80;
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
	CLKPR = 0x01; //16MHz / 2 = 8MHz CLK_IO
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 83       	st	Z, r24
	
	MCUCR = MCUCR|(1<<JTD); //JTAG disable
  e0:	85 b7       	in	r24, 0x35	; 53
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	85 bf       	out	0x35, r24	; 53
	MCUCR = MCUCR|(1<<JTD);
  e6:	85 b7       	in	r24, 0x35	; 53
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	85 bf       	out	0x35, r24	; 53
	
	LCD_init();
  ec:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_init>
	LCD_cmd(0x0C);
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_cmd>
	 
	DDRB = DDRB | (1<<DDB7); //PB7 OUTPUT (LED)
  f6:	27 9a       	sbi	0x04, 7	; 4
	 
	DDRC = DDRC | (1<<DDC7); //OC4A -Pin (PC7) als OUTPUT Timer4
  f8:	3f 9a       	sbi	0x07, 7	; 7
	DDRB = DDRB | (1<<DDB6);//OC4B -Pin (PB6) als Output Timer4
  fa:	26 9a       	sbi	0x04, 6	; 4
	 
	DDRE = DDRE &~(1<<DDE6);//PE6 Input (AIN+ Für Komperator)
  fc:	6e 98       	cbi	0x0d, 6	; 13
	DDRF = DDRF &~(1<<DDF4); //PF4 INPUT (AIN- ADC4)
  fe:	84 98       	cbi	0x10, 4	; 16
	 
	//DDRF = DDRF &~(1<<DDF0); //PF0 INPUT (ADC0 für Poti)
	 
	DDRD = DDRD &~(1<<DDD0) &~(1<<DDD1) &~(1<<DDD2) &~(1<<DDD3); //PD0-3 Input (External Interrupt0-3)
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD |(1<<PORTD0) |(1<<PORTD1) |(1<<PORTD2) |(1<<PORTD3);//PD0-3 Pull up ein
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	8f 60       	ori	r24, 0x0F	; 15
 10a:	8b b9       	out	0x0b, r24	; 11
	
	DIDR1 = DIDR1 | (1<<AIN0D); //dig. Input Buffer am AIN+ (PE6) disable
 10c:	ef e7       	ldi	r30, 0x7F	; 127
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	DIDR0 = DIDR0 | (1<<ADC4D); //dig. Input Buffer am ADC4 (PF4) disable
 116:	ee e7       	ldi	r30, 0x7E	; 126
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	80 83       	st	Z, r24
	 
	 
	TCCR4A = TCCR4A | (1<<PWM4A);
 120:	e0 ec       	ldi	r30, 0xC0	; 192
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	82 60       	ori	r24, 0x02	; 2
 128:	80 83       	st	Z, r24
	TCCR4A = TCCR4A | (1<<PWM4B);
 12a:	80 81       	ld	r24, Z
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	80 83       	st	Z, r24
	TCCR4D = TCCR4D &~(1<<WGM41);
 130:	a3 ec       	ldi	r26, 0xC3	; 195
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	8c 91       	ld	r24, X
 136:	8d 7f       	andi	r24, 0xFD	; 253
 138:	8c 93       	st	X, r24
	TCCR4D = TCCR4D &~(1<<WGM40); //Fast PWM Mode
 13a:	8c 91       	ld	r24, X
 13c:	8e 7f       	andi	r24, 0xFE	; 254
 13e:	8c 93       	st	X, r24
	 
	TCCR4A = TCCR4A | (1<<COM4A1);
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
	TCCR4A = TCCR4A &~ (1<<COM4A0); //COM4A1:0=2, OC4A(PC7) Pin ein 
 146:	80 81       	ld	r24, Z
 148:	8f 7b       	andi	r24, 0xBF	; 191
 14a:	80 83       	st	Z, r24
	 
	TCCR4A = TCCR4A | (1<<COM4B1);
 14c:	80 81       	ld	r24, Z
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	80 83       	st	Z, r24
	TCCR4A = TCCR4A &~ (1<<COM4B0); //COM4B1:0=2, OC4B(PB6) Pin ein
 152:	80 81       	ld	r24, Z
 154:	8f 7e       	andi	r24, 0xEF	; 239
 156:	80 83       	st	Z, r24
	 
	 
	TCCR4D = TCCR4D | (1<<FPEN4);//Fault Protection Enable
 158:	8c 91       	ld	r24, X
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	8c 93       	st	X, r24
	TCCR4D = TCCR4D | (1<<FPIE4); //Fault Protection Interrupt Enable
 15e:	8c 91       	ld	r24, X
 160:	80 68       	ori	r24, 0x80	; 128
 162:	8c 93       	st	X, r24
	TCCR4D = TCCR4D | (1<<FPAC4);// Analog comparator auswählen
 164:	8c 91       	ld	r24, X
 166:	88 60       	ori	r24, 0x08	; 8
 168:	8c 93       	st	X, r24
	 
	OCR4C = 200; //TOP für f_PWM = 10 kHz, f_PWM = f_CLK_T4/OCR4C
 16a:	88 ec       	ldi	r24, 0xC8	; 200
 16c:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7e00d1>
	 
	 
	TCCR4B = TCCR4B &~(1<<CS43);
 170:	e1 ec       	ldi	r30, 0xC1	; 193
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	87 7f       	andi	r24, 0xF7	; 247
 178:	80 83       	st	Z, r24
	TCCR4B = TCCR4B &~(1<<CS42);
 17a:	80 81       	ld	r24, Z
 17c:	8b 7f       	andi	r24, 0xFB	; 251
 17e:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS41);
 180:	80 81       	ld	r24, Z
 182:	82 60       	ori	r24, 0x02	; 2
 184:	80 83       	st	Z, r24
	TCCR4B = TCCR4B | (1<<CS40); //Timer4 Prescaler 4, Start PWM
 186:	80 81       	ld	r24, Z
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 83       	st	Z, r24
	 
	TIMSK0 = TIMSK0 | (1<<TOIE0); //Timer_0 Overflow Interrupt freigeben
 18c:	ee e6       	ldi	r30, 0x6E	; 110
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	81 60       	ori	r24, 0x01	; 1
 194:	80 83       	st	Z, r24
	TCNT0 = 256-125; //Startwert für 1ms (125*8us=1ms)
 196:	83 e8       	ldi	r24, 0x83	; 131
 198:	86 bd       	out	0x26, r24	; 38
	

	EICRA = EICRA | (1<<ISC01); //INT0 fallende Flanke
 19a:	e9 e6       	ldi	r30, 0x69	; 105
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT0); //INT0 freigeben
 1a4:	e8 9a       	sbi	0x1d, 0	; 29
	
	EICRA = EICRA | (1<<ISC11); //INT1 fallende Flanke
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT1); //INT1 freigeben
 1ac:	e9 9a       	sbi	0x1d, 1	; 29
	
	EICRA = EICRA | (1<<ISC21); //INT2 fallende Flanke
 1ae:	80 81       	ld	r24, Z
 1b0:	80 62       	ori	r24, 0x20	; 32
 1b2:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT2); //INT2 freigeben
 1b4:	ea 9a       	sbi	0x1d, 2	; 29
	
	EICRA = EICRA | (1<<ISC31); //INT3 fallende Flanke
 1b6:	80 81       	ld	r24, Z
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	80 83       	st	Z, r24
	EIMSK = EIMSK | (1<<INT3); //INT3 freigeben
 1bc:	eb 9a       	sbi	0x1d, 3	; 29
	
	
	sei();
 1be:	78 94       	sei
 1c0:	08 95       	ret

000001c2 <Fault_Protection>:
	PWMt = (float)adc_h / 2.55;//5V in 100 Schritte einteilen
	return(PWMt);
}*/
void Fault_Protection(void)
{
	ADCSRA = ADCSRA &~(1<<ADEN); //ADC aus
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8f 77       	andi	r24, 0x7F	; 127
 1ca:	80 83       	st	Z, r24
	//ACSR = ACSR &~ (1<<ACD); // Comparator ein
	ADCSRB = ADCSRB | (1<<ACME); //AIN- hängt am ADC Multiplexer
 1cc:	eb e7       	ldi	r30, 0x7B	; 123
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	80 64       	ori	r24, 0x40	; 64
 1d4:	80 83       	st	Z, r24
	ADMUX = ADMUX | (1<<MUX2); //ADC4 als AIN- Input wählen
 1d6:	ec e7       	ldi	r30, 0x7C	; 124
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	84 60       	ori	r24, 0x04	; 4
 1de:	80 83       	st	Z, r24
	ACSR = ACSR | (1<<ACIE); //Analog Comparator Interrupt enable
 1e0:	80 b7       	in	r24, 0x30	; 48
 1e2:	88 60       	ori	r24, 0x08	; 8
 1e4:	80 bf       	out	0x30, r24	; 48
 1e6:	08 95       	ret

000001e8 <delay_ms>:
#include <util/delay.h>		// _delay_ms() geht nur bis max. 262.14 ms / F_CPU !!!

void delay_ms (unsigned int ms)   //Hilfsfunktion: Zeitvernichtung
{
unsigned int i;
	for (i=0; i<ms; i++)
 1e8:	00 97       	sbiw	r24, 0x00	; 0
 1ea:	69 f0       	breq	.+26     	; 0x206 <delay_ms+0x1e>
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	ef ec       	ldi	r30, 0xCF	; 207
 1f2:	f7 e0       	ldi	r31, 0x07	; 7
 1f4:	31 97       	sbiw	r30, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <delay_ms+0xc>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <delay_ms+0x12>
 1fa:	00 00       	nop
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	3f 4f       	sbci	r19, 0xFF	; 255
 200:	82 17       	cp	r24, r18
 202:	93 07       	cpc	r25, r19
 204:	a9 f7       	brne	.-22     	; 0x1f0 <delay_ms+0x8>
 206:	08 95       	ret

00000208 <Enable>:

}

void Enable(void)		//Hilfsfunktion: H=>L Flanke der Enable Leitung (E)
{
	PORTLCD = PORTLCD | (1<<E);	//E = 1
 208:	2d 9a       	sbi	0x05, 5	; 5
	delay_ms(5);
 20a:	85 e0       	ldi	r24, 0x05	; 5
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <delay_ms>
	PORTLCD = PORTLCD &~(1<<E);	//E = 0
 212:	2d 98       	cbi	0x05, 5	; 5
	delay_ms(5);
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <delay_ms>
 21c:	08 95       	ret

0000021e <LCD_init>:
// LCD_init(..) Initialisierung: Port D, 4-Bit Mode, 2 Zeilen, 5x7 Dots
//
////////////////////////////////////////////////////////////////////////////
void LCD_init(void)
{
	DDRLCD = DDRLCD |(1<<E) |(1<<RS);               			//E,RS als Ausgang
 21e:	84 b1       	in	r24, 0x04	; 4
 220:	80 63       	ori	r24, 0x30	; 48
 222:	84 b9       	out	0x04, r24	; 4
	DDRLCD = DDRLCD |(1<<DB7)|(1<<DB6)|(1<<DB5)|(1<<DB4);		//DB7..DB4 als Ausgang
 224:	84 b1       	in	r24, 0x04	; 4
 226:	8f 60       	ori	r24, 0x0F	; 15
 228:	84 b9       	out	0x04, r24	; 4

	delay_ms(50);	//lt. Datenblatt min. 15ms nach Power ON warten
 22a:	82 e3       	ldi	r24, 0x32	; 50
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <delay_ms>
	PORTLCD = PORTLCD & (~(1<<RS) &  ~(1<<E)); //RS=0,E=0 (RW=0 per HW)
 232:	85 b1       	in	r24, 0x05	; 5
 234:	8f 7c       	andi	r24, 0xCF	; 207
 236:	85 b9       	out	0x05, r24	; 5

// Function Set
	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit
 238:	85 b1       	in	r24, 0x05	; 5
 23a:	83 7f       	andi	r24, 0xF3	; 243
 23c:	85 b9       	out	0x05, r24	; 5
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 23e:	85 b1       	in	r24, 0x05	; 5
 240:	83 60       	ori	r24, 0x03	; 3
 242:	85 b9       	out	0x05, r24	; 5
	Enable();
 244:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit
 248:	85 b1       	in	r24, 0x05	; 5
 24a:	83 7f       	andi	r24, 0xF3	; 243
 24c:	85 b9       	out	0x05, r24	; 5
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 24e:	85 b1       	in	r24, 0x05	; 5
 250:	83 60       	ori	r24, 0x03	; 3
 252:	85 b9       	out	0x05, r24	; 5
	Enable();
 254:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Interface auf 8 Bit
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	83 7f       	andi	r24, 0xF3	; 243
 25c:	85 b9       	out	0x05, r24	; 5
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 25e:	85 b1       	in	r24, 0x05	; 5
 260:	83 60       	ori	r24, 0x03	; 3
 262:	85 b9       	out	0x05, r24	; 5
	Enable();
 264:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 0010
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	82 7f       	andi	r24, 0xF2	; 242
 26c:	85 b9       	out	0x05, r24	; 5
	PORTLCD = PORTLCD | (1<<DB5);					//Interface auf 4 Bit
 26e:	29 9a       	sbi	0x05, 1	; 5
	Enable();
 270:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

// 2-zeilig, 5x8 Matrix
	//DB7..DB4 = 0010
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) &~(1<<DB4));
 274:	85 b1       	in	r24, 0x05	; 5
 276:	82 7f       	andi	r24, 0xF2	; 242
 278:	85 b9       	out	0x05, r24	; 5
	PORTLCD = PORTLCD | (1<<DB5);					//Upper Nibble
 27a:	29 9a       	sbi	0x05, 1	; 5
	Enable();
 27c:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 0000
	PORTLCD = PORTLCD | (1<<DB7);			//Lower Nibble
 280:	2b 9a       	sbi	0x05, 3	; 5
	PORTLCD = PORTLCD & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));
 282:	85 b1       	in	r24, 0x05	; 5
 284:	88 7f       	andi	r24, 0xF8	; 248
 286:	85 b9       	out	0x05, r24	; 5
	Enable();
 288:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

//Display Off //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	80 7f       	andi	r24, 0xF0	; 240
 290:	85 b9       	out	0x05, r24	; 5
	Enable();
 292:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 1000
	PORTLCD = PORTLCD | (1<<DB7);					//Lower Nibble
 296:	2b 9a       	sbi	0x05, 3	; 5
	PORTLCD = PORTLCD & (~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4));
 298:	85 b1       	in	r24, 0x05	; 5
 29a:	88 7f       	andi	r24, 0xF8	; 248
 29c:	85 b9       	out	0x05, r24	; 5
	Enable();
 29e:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

//Clear Display //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 2a2:	85 b1       	in	r24, 0x05	; 5
 2a4:	80 7f       	andi	r24, 0xF0	; 240
 2a6:	85 b9       	out	0x05, r24	; 5
	Enable();
 2a8:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 0001
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5)); //Lower Nibble
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	81 7f       	andi	r24, 0xF1	; 241
 2b0:	85 b9       	out	0x05, r24	; 5
	PORTLCD = PORTLCD | (1<<DB4);
 2b2:	28 9a       	sbi	0x05, 0	; 5
	Enable();
 2b4:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

//No Display Shift //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	80 7f       	andi	r24, 0xF0	; 240
 2bc:	85 b9       	out	0x05, r24	; 5
	Enable();
 2be:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 0011
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6));	//Lower Nibble
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	83 7f       	andi	r24, 0xF3	; 243
 2c6:	85 b9       	out	0x05, r24	; 5
	PORTLCD = PORTLCD | (1<<DB5) | (1<<DB4);
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	83 60       	ori	r24, 0x03	; 3
 2cc:	85 b9       	out	0x05, r24	; 5
	Enable();
 2ce:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

// Display ON , Cursor ON, Blinken ON //
	//DB7..DB4 = 0000
	PORTLCD = PORTLCD & (~(1<<DB7) & ~(1<<DB6) & ~(1<<DB5) & ~(1<<DB4)); //Upper Nibble
 2d2:	85 b1       	in	r24, 0x05	; 5
 2d4:	80 7f       	andi	r24, 0xF0	; 240
 2d6:	85 b9       	out	0x05, r24	; 5
	Enable();
 2d8:	0e 94 04 01 	call	0x208	; 0x208 <Enable>

	//DB7..DB4 = 1111
	PORTLCD = PORTLCD | (1<<DB7) | (1<<DB6) | (1<<DB5) | (1<<DB4);	//Lower Nibble
 2dc:	85 b1       	in	r24, 0x05	; 5
 2de:	8f 60       	ori	r24, 0x0F	; 15
 2e0:	85 b9       	out	0x05, r24	; 5
	Enable();
 2e2:	0e 94 04 01 	call	0x208	; 0x208 <Enable>
 2e6:	08 95       	ret

000002e8 <LCD_send>:
//
// LCD_send(..) sendet 1 Byte im 4-Bit Mode
//
////////////////////////////////////////////////////////////////////////////
void LCD_send(char data)
{
 2e8:	cf 93       	push	r28
 2ea:	c8 2f       	mov	r28, r24
	char temp = data;

		PORTLCD = PORTLCD | (1<<RS);	//SFR vom LCD mit RS auf Daten umschlten
 2ec:	2c 9a       	sbi	0x05, 4	; 5

		//Upper Nibble senden
		if (temp & 0b10000000) {PORTLCD = PORTLCD | (1<<DB7);}
 2ee:	88 23       	and	r24, r24
 2f0:	14 f4       	brge	.+4      	; 0x2f6 <LCD_send+0xe>
 2f2:	2b 9a       	sbi	0x05, 3	; 5
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <LCD_send+0x10>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 2f6:	2b 98       	cbi	0x05, 3	; 5

		if (temp & 0b01000000) {PORTLCD = PORTLCD | (1<<DB6);}
 2f8:	c6 ff       	sbrs	r28, 6
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <LCD_send+0x18>
 2fc:	2a 9a       	sbi	0x05, 2	; 5
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <LCD_send+0x1a>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 300:	2a 98       	cbi	0x05, 2	; 5

		if (temp & 0b00100000) {PORTLCD = PORTLCD | (1<<DB5);}
 302:	c5 ff       	sbrs	r28, 5
 304:	02 c0       	rjmp	.+4      	; 0x30a <LCD_send+0x22>
 306:	29 9a       	sbi	0x05, 1	; 5
 308:	01 c0       	rjmp	.+2      	; 0x30c <LCD_send+0x24>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 30a:	29 98       	cbi	0x05, 1	; 5

		if (temp & 0b00010000) {PORTLCD = PORTLCD | (1<<DB4);}
 30c:	c4 ff       	sbrs	r28, 4
 30e:	02 c0       	rjmp	.+4      	; 0x314 <LCD_send+0x2c>
 310:	28 9a       	sbi	0x05, 0	; 5
 312:	01 c0       	rjmp	.+2      	; 0x316 <LCD_send+0x2e>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 314:	28 98       	cbi	0x05, 0	; 5

		Enable();
 316:	0e 94 04 01 	call	0x208	; 0x208 <Enable>
		delay_ms(1);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <delay_ms>

		//Lower Nibble senden
		if (temp & 0b00001000) {PORTLCD = PORTLCD | (1<<DB7);}
 322:	c3 ff       	sbrs	r28, 3
 324:	02 c0       	rjmp	.+4      	; 0x32a <LCD_send+0x42>
 326:	2b 9a       	sbi	0x05, 3	; 5
 328:	01 c0       	rjmp	.+2      	; 0x32c <LCD_send+0x44>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 32a:	2b 98       	cbi	0x05, 3	; 5

		if (temp & 0b00000100) {PORTLCD = PORTLCD | (1<<DB6);}
 32c:	c2 ff       	sbrs	r28, 2
 32e:	02 c0       	rjmp	.+4      	; 0x334 <LCD_send+0x4c>
 330:	2a 9a       	sbi	0x05, 2	; 5
 332:	01 c0       	rjmp	.+2      	; 0x336 <LCD_send+0x4e>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 334:	2a 98       	cbi	0x05, 2	; 5

		if (temp & 0b00000010) {PORTLCD = PORTLCD | (1<<DB5);}
 336:	c1 ff       	sbrs	r28, 1
 338:	02 c0       	rjmp	.+4      	; 0x33e <LCD_send+0x56>
 33a:	29 9a       	sbi	0x05, 1	; 5
 33c:	01 c0       	rjmp	.+2      	; 0x340 <LCD_send+0x58>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 33e:	29 98       	cbi	0x05, 1	; 5

		if (temp & 0b00000001) {PORTLCD = PORTLCD | (1<<DB4);}
 340:	c0 ff       	sbrs	r28, 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <LCD_send+0x60>
 344:	28 9a       	sbi	0x05, 0	; 5
 346:	01 c0       	rjmp	.+2      	; 0x34a <LCD_send+0x62>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 348:	28 98       	cbi	0x05, 0	; 5

		Enable();
 34a:	0e 94 04 01 	call	0x208	; 0x208 <Enable>
		delay_ms(1);
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <delay_ms>

}
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <LCD_cmd>:
//
// LCD_cmd(..) Befehl senden im 4-Bit Mode
//
////////////////////////////////////////////////////////////////////////////
void LCD_cmd(char data)
{
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
	char temp = data;

		PORTLCD = PORTLCD & ~(1<<RS);	//SFR vom LCD mit RS auf Befehle umschalten
 35e:	2c 98       	cbi	0x05, 4	; 5

		//Upper Nibble senden
		if (temp & 0b10000000) {PORTLCD = PORTLCD | (1<<DB7);}
 360:	88 23       	and	r24, r24
 362:	14 f4       	brge	.+4      	; 0x368 <LCD_cmd+0xe>
 364:	2b 9a       	sbi	0x05, 3	; 5
 366:	01 c0       	rjmp	.+2      	; 0x36a <LCD_cmd+0x10>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 368:	2b 98       	cbi	0x05, 3	; 5

		if (temp & 0b01000000) {PORTLCD = PORTLCD | (1<<DB6);}
 36a:	c6 ff       	sbrs	r28, 6
 36c:	02 c0       	rjmp	.+4      	; 0x372 <LCD_cmd+0x18>
 36e:	2a 9a       	sbi	0x05, 2	; 5
 370:	01 c0       	rjmp	.+2      	; 0x374 <LCD_cmd+0x1a>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 372:	2a 98       	cbi	0x05, 2	; 5

		if (temp & 0b00100000) {PORTLCD = PORTLCD | (1<<DB5);}
 374:	c5 ff       	sbrs	r28, 5
 376:	02 c0       	rjmp	.+4      	; 0x37c <LCD_cmd+0x22>
 378:	29 9a       	sbi	0x05, 1	; 5
 37a:	01 c0       	rjmp	.+2      	; 0x37e <LCD_cmd+0x24>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 37c:	29 98       	cbi	0x05, 1	; 5

		if (temp & 0b00010000) {PORTLCD = PORTLCD | (1<<DB4);}
 37e:	c4 ff       	sbrs	r28, 4
 380:	02 c0       	rjmp	.+4      	; 0x386 <LCD_cmd+0x2c>
 382:	28 9a       	sbi	0x05, 0	; 5
 384:	01 c0       	rjmp	.+2      	; 0x388 <LCD_cmd+0x2e>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 386:	28 98       	cbi	0x05, 0	; 5

		Enable();
 388:	0e 94 04 01 	call	0x208	; 0x208 <Enable>
		delay_ms(1);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <delay_ms>

		//Lower Nibble senden
		if (temp & 0b00001000) {PORTLCD = PORTLCD | (1<<DB7);}
 394:	c3 ff       	sbrs	r28, 3
 396:	02 c0       	rjmp	.+4      	; 0x39c <LCD_cmd+0x42>
 398:	2b 9a       	sbi	0x05, 3	; 5
 39a:	01 c0       	rjmp	.+2      	; 0x39e <LCD_cmd+0x44>
		else {PORTLCD = PORTLCD & ~(1<<DB7);}
 39c:	2b 98       	cbi	0x05, 3	; 5

		if (temp & 0b00000100) {PORTLCD = PORTLCD | (1<<DB6);}
 39e:	c2 ff       	sbrs	r28, 2
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <LCD_cmd+0x4c>
 3a2:	2a 9a       	sbi	0x05, 2	; 5
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <LCD_cmd+0x4e>
		else {PORTLCD = PORTLCD & ~(1<<DB6);}
 3a6:	2a 98       	cbi	0x05, 2	; 5

		if (temp & 0b00000010) {PORTLCD = PORTLCD | (1<<DB5);}
 3a8:	c1 ff       	sbrs	r28, 1
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <LCD_cmd+0x56>
 3ac:	29 9a       	sbi	0x05, 1	; 5
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <LCD_cmd+0x58>
		else {PORTLCD = PORTLCD & ~(1<<DB5);}
 3b0:	29 98       	cbi	0x05, 1	; 5

		if (temp & 0b00000001) {PORTLCD = PORTLCD | (1<<DB4);}
 3b2:	c0 ff       	sbrs	r28, 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <LCD_cmd+0x60>
 3b6:	28 9a       	sbi	0x05, 0	; 5
 3b8:	01 c0       	rjmp	.+2      	; 0x3bc <LCD_cmd+0x62>
		else {PORTLCD = PORTLCD & ~(1<<DB4);}
 3ba:	28 98       	cbi	0x05, 0	; 5

		Enable();
 3bc:	0e 94 04 01 	call	0x208	; 0x208 <Enable>
		delay_ms(1);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <delay_ms>

}
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <main>:

int main (void)
{
	 char buffer[20];    //Wird benötigt um am LCD Ziffern auszugeben
	 
	allinit();
 3cc:	0e 94 6a 00 	call	0xd4	; 0xd4 <allinit>
	
	Fault_Protection();
 3d0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <Fault_Protection>
	{
		LCD_cmd(0xC5); //gehe zu 2. Zeile, 6. Position
		LCD_send('a');
		if(duty1 >= 0 && duty1 <= 100)
		{
			OCR4A = duty1 *  2;//PWM1 Tastverhältnis einstellen
 3d4:	cf ec       	ldi	r28, 0xCF	; 207
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		if(duty2 >= 0 && duty2 <= 100)
		{
			OCR4B = duty2 *  2;//PWM2 Tastverhältnis einstellen
 3d8:	00 ed       	ldi	r16, 0xD0	; 208
 3da:	10 e0       	ldi	r17, 0x00	; 0
	Fault_Protection();
	
	
	while(1)
	{
		LCD_cmd(0xC5); //gehe zu 2. Zeile, 6. Position
 3dc:	85 ec       	ldi	r24, 0xC5	; 197
 3de:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_cmd>
		LCD_send('a');
 3e2:	81 e6       	ldi	r24, 0x61	; 97
 3e4:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_send>
		if(duty1 >= 0 && duty1 <= 100)
 3e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 3ec:	85 36       	cpi	r24, 0x65	; 101
 3ee:	10 f4       	brcc	.+4      	; 0x3f4 <main+0x28>
		{
			OCR4A = duty1 *  2;//PWM1 Tastverhältnis einstellen
 3f0:	88 0f       	add	r24, r24
 3f2:	88 83       	st	Y, r24
		}
		if(duty2 >= 0 && duty2 <= 100)
 3f4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 3f8:	85 36       	cpi	r24, 0x65	; 101
 3fa:	80 f7       	brcc	.-32     	; 0x3dc <main+0x10>
		{
			OCR4B = duty2 *  2;//PWM2 Tastverhältnis einstellen
 3fc:	88 0f       	add	r24, r24
 3fe:	f8 01       	movw	r30, r16
 400:	80 83       	st	Z, r24
 402:	ec cf       	rjmp	.-40     	; 0x3dc <main+0x10>

00000404 <__vector_42>:
	}
	return 0;
}

ISR (TIMER4_FPF_vect)
{
 404:	1f 92       	push	r1
 406:	0f 92       	push	r0
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	0f 92       	push	r0
 40c:	11 24       	eor	r1, r1
	PORTC = PORTC &~(1<<PORTC6);
 40e:	46 98       	cbi	0x08, 6	; 8
	PORTC = PORTC &~(1<<PORTC7);
 410:	47 98       	cbi	0x08, 7	; 8
	while(1)
	{
		PORTB = PORTB ^(1<<PORTB7);
 412:	85 b1       	in	r24, 0x05	; 5
 414:	80 58       	subi	r24, 0x80	; 128
 416:	85 b9       	out	0x05, r24	; 5
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	84 e3       	ldi	r24, 0x34	; 52
 41c:	9c e0       	ldi	r25, 0x0C	; 12
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__vector_42+0x1a>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__vector_42+0x24>
 428:	00 00       	nop
 42a:	f3 cf       	rjmp	.-26     	; 0x412 <__vector_42+0xe>

0000042c <__vector_1>:
		_delay_ms(500);
	}
}

ISR (INT0_vect) // Wenn Taster an PD0 gedrückt
{
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
	if(duty1 < 100)
 43a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 43e:	84 36       	cpi	r24, 0x64	; 100
 440:	18 f4       	brcc	.+6      	; 0x448 <__vector_1+0x1c>
	{
		duty1++;
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
	}
	dutyh = 1;
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 44e:	85 b5       	in	r24, 0x25	; 37
 450:	83 60       	ori	r24, 0x03	; 3
 452:	85 bd       	out	0x25, r24	; 37
	timer0zeit = 700; //700ms
 454:	8c eb       	ldi	r24, 0xBC	; 188
 456:	92 e0       	ldi	r25, 0x02	; 2
 458:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 45c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_2>:

ISR (INT1_vect) // Wenn Taster an PD1 gedrückt
{
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	8f 93       	push	r24
 47a:	9f 93       	push	r25
	if(duty1 > 0)
 47c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 480:	88 23       	and	r24, r24
 482:	19 f0       	breq	.+6      	; 0x48a <__vector_2+0x1c>
	{
		duty1--;
 484:	81 50       	subi	r24, 0x01	; 1
 486:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
	}
	dutyh = 2;
 48a:	82 e0       	ldi	r24, 0x02	; 2
 48c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 490:	85 b5       	in	r24, 0x25	; 37
 492:	83 60       	ori	r24, 0x03	; 3
 494:	85 bd       	out	0x25, r24	; 37
	timer0zeit = 700; //700ms
 496:	8c eb       	ldi	r24, 0xBC	; 188
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 49e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <__vector_3>:
ISR (INT2_vect) // Wenn Taster an PD2 gedrückt
{
 4b0:	1f 92       	push	r1
 4b2:	0f 92       	push	r0
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
	if(duty2 < 100)
 4be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 4c2:	84 36       	cpi	r24, 0x64	; 100
 4c4:	18 f4       	brcc	.+6      	; 0x4cc <__vector_3+0x1c>
	{
		duty2++;
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
 4c8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
	}
	dutyh = 3;
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 4d2:	85 b5       	in	r24, 0x25	; 37
 4d4:	83 60       	ori	r24, 0x03	; 3
 4d6:	85 bd       	out	0x25, r24	; 37
	timer0h = 0;
 4d8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0h+0x1>
 4dc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0h>
	timer0zeit = 700; //700ms
 4e0:	8c eb       	ldi	r24, 0xBC	; 188
 4e2:	92 e0       	ldi	r25, 0x02	; 2
 4e4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 4e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	0f 90       	pop	r0
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <__vector_4>:
ISR (INT3_vect) // Wenn Taster an PD3 gedrückt
{
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
	if(duty2 > 0)
 508:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 50c:	88 23       	and	r24, r24
 50e:	19 f0       	breq	.+6      	; 0x516 <__vector_4+0x1c>
	{
		duty2--;
 510:	81 50       	subi	r24, 0x01	; 1
 512:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
	}
	dutyh = 4;
 516:	84 e0       	ldi	r24, 0x04	; 4
 518:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <dutyh>
	TCCR0B = TCCR0B | (1<<CS01)|(1<<CS00);//:64 Teiler => dt=64/8MHz=8us startet timer0
 51c:	85 b5       	in	r24, 0x25	; 37
 51e:	83 60       	ori	r24, 0x03	; 3
 520:	85 bd       	out	0x25, r24	; 37
	timer0zeit = 700; //700ms
 522:	8c eb       	ldi	r24, 0xBC	; 188
 524:	92 e0       	ldi	r25, 0x02	; 2
 526:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 52a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	0f 90       	pop	r0
 534:	0f be       	out	0x3f, r0	; 63
 536:	0f 90       	pop	r0
 538:	1f 90       	pop	r1
 53a:	18 95       	reti

0000053c <__vector_23>:

ISR (TIMER0_OVF_vect)
{
 53c:	1f 92       	push	r1
 53e:	0f 92       	push	r0
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	0f 92       	push	r0
 544:	11 24       	eor	r1, r1
 546:	2f 93       	push	r18
 548:	3f 93       	push	r19
 54a:	8f 93       	push	r24
 54c:	9f 93       	push	r25
	timer0h++;
 54e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <timer0h>
 552:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <timer0h+0x1>
 556:	01 96       	adiw	r24, 0x01	; 1
 558:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <timer0h+0x1>
 55c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <timer0h>
	if(((PIND & (1<<PIND0)) == 1) && ((PIND & (1<<PIND1)) == 1) && ((PIND & (1<<PIND2)) == 1) && ((PIND & (1<<PIND3)) == 1))
 560:	48 99       	sbic	0x09, 0	; 9
 562:	29 b1       	in	r18, 0x09	; 9
	{
		TCCR0B = TCCR0B &~ (1<<CS01) &~ (1<<CS00);//stoppt timer0
		timer0h = 0;
	}
	if(timer0h > timer0zeit)
 564:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 568:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 56c:	28 17       	cp	r18, r24
 56e:	39 07       	cpc	r19, r25
 570:	08 f0       	brcs	.+2      	; 0x574 <__vector_23+0x38>
 572:	44 c0       	rjmp	.+136    	; 0x5fc <__vector_23+0xc0>
	{
		switch (dutyh)
 574:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <dutyh>
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	99 f0       	breq	.+38     	; 0x5a2 <__vector_23+0x66>
 57c:	18 f4       	brcc	.+6      	; 0x584 <__vector_23+0x48>
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	31 f0       	breq	.+12     	; 0x58e <__vector_23+0x52>
 582:	2d c0       	rjmp	.+90     	; 0x5de <__vector_23+0xa2>
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	b9 f0       	breq	.+46     	; 0x5b6 <__vector_23+0x7a>
 588:	84 30       	cpi	r24, 0x04	; 4
 58a:	f9 f0       	breq	.+62     	; 0x5ca <__vector_23+0x8e>
 58c:	28 c0       	rjmp	.+80     	; 0x5de <__vector_23+0xa2>
		{
			case 1: // Taster 1
				if ((PIND & (1<<PIND0)) == 0) //wenn PD0 = LOW
 58e:	48 99       	sbic	0x09, 0	; 9
 590:	2b c0       	rjmp	.+86     	; 0x5e8 <__vector_23+0xac>
				{
					if(duty1 < 100)
 592:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 596:	84 36       	cpi	r24, 0x64	; 100
 598:	38 f5       	brcc	.+78     	; 0x5e8 <__vector_23+0xac>
					{
						duty1++;
 59a:	8f 5f       	subi	r24, 0xFF	; 255
 59c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
 5a0:	23 c0       	rjmp	.+70     	; 0x5e8 <__vector_23+0xac>
					}
				}
				break;
			case 2: //Taster 2
				if ((PIND & (1<<PIND1)) == 0) //wenn PD1 = LOW
 5a2:	49 99       	sbic	0x09, 1	; 9
 5a4:	21 c0       	rjmp	.+66     	; 0x5e8 <__vector_23+0xac>
				{
					if(duty1 > 0)
 5a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <duty1>
 5aa:	88 23       	and	r24, r24
 5ac:	e9 f0       	breq	.+58     	; 0x5e8 <__vector_23+0xac>
					{
						duty1--;
 5ae:	81 50       	subi	r24, 0x01	; 1
 5b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <duty1>
 5b4:	19 c0       	rjmp	.+50     	; 0x5e8 <__vector_23+0xac>
					}
				}
				break;
				case 3: //Taster 3
				if ((PIND & (1<<PIND2)) == 0) //wenn PD2 = LOW
 5b6:	4a 99       	sbic	0x09, 2	; 9
 5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <__vector_23+0xac>
				{
					if(duty2 < 100)
 5ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 5be:	84 36       	cpi	r24, 0x64	; 100
 5c0:	98 f4       	brcc	.+38     	; 0x5e8 <__vector_23+0xac>
					{
						duty2++;
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
 5c8:	0f c0       	rjmp	.+30     	; 0x5e8 <__vector_23+0xac>
					}
				}
				break;
				case 4:
				if ((PIND & (1<<PIND3)) == 0) //wenn PD3 = LOW
 5ca:	4b 99       	sbic	0x09, 3	; 9
 5cc:	0d c0       	rjmp	.+26     	; 0x5e8 <__vector_23+0xac>
				{
					if(duty2 > 0)
 5ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <duty2>
 5d2:	88 23       	and	r24, r24
 5d4:	49 f0       	breq	.+18     	; 0x5e8 <__vector_23+0xac>
					{
						duty2--;
 5d6:	81 50       	subi	r24, 0x01	; 1
 5d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <duty2>
 5dc:	05 c0       	rjmp	.+10     	; 0x5e8 <__vector_23+0xac>
					}
				}
				break;
			default:
				{
					TCCR0B = TCCR0B &~ (1<<CS01) &~ (1<<CS00);//stoppt timer0
 5de:	85 b5       	in	r24, 0x25	; 37
 5e0:	8c 7f       	andi	r24, 0xFC	; 252
 5e2:	85 bd       	out	0x25, r24	; 37
					timer0h = 0;
					dutyh = 0;
 5e4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <dutyh>
					break;
				}
		}
		timer0zeit = 50; // 50 ms
 5e8:	82 e3       	ldi	r24, 0x32	; 50
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 5f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		timer0h = 0;
 5f4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <timer0h+0x1>
 5f8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <timer0h>
	}
	
	
	TCNT0 = 256-125; //Reinitialisierung
 5fc:	83 e8       	ldi	r24, 0x83	; 131
 5fe:	86 bd       	out	0x26, r24	; 38
}
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	3f 91       	pop	r19
 606:	2f 91       	pop	r18
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <_exit>:
 612:	f8 94       	cli

00000614 <__stop_program>:
 614:	ff cf       	rjmp	.-2      	; 0x614 <__stop_program>
